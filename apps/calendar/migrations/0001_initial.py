# -*- coding: utf-8 -*-
# Generated by Django 1.11.23 on 2019-12-08 12:06
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(help_text=b'Email of the attendee', max_length=254, unique=True)),
                ('user', models.ForeignKey(blank=True, help_text=b'Link to User if exists in system', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Attendee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rsvp', models.CharField(choices=[(b'needs_action', b'Needs Action'), (b'declined', b'Declined'), (b'tentative', b'Tentative'), (b'accepted', b'Accepted')], default=b'needs_action', help_text=b'RSVP of the Attendee', max_length=40)),
                ('account', models.ForeignKey(help_text=b'Account of Attendee', on_delete=django.db.models.deletion.CASCADE, to='calendar.Account')),
            ],
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text=b'Title of the Calendar', max_length=255)),
                ('timezone', models.CharField(help_text=b'Default timezone of the Calendar i.e. for its events', max_length=100)),
                ('events_sync_token', models.CharField(help_text=b'SyncToken of the events in Calendar used to get any new events of the Calendar', max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.CharField(help_text=b"Calender's Event ID", max_length=255, primary_key=True, serialize=False)),
                ('event_link', models.CharField(help_text=b'Link of Google Calendar Event', max_length=255)),
                ('title', models.CharField(help_text=b'Event Title/Summary', max_length=256)),
                ('description', models.TextField(blank=True, help_text=b'Event details')),
                ('location', models.TextField(blank=True, help_text=b'Location of the event')),
                ('start_time', models.DateTimeField(help_text=b'Start time of the event')),
                ('end_time', models.DateTimeField(help_text=b'End time of the event')),
                ('created_at', models.DateTimeField(help_text=b'Event creation time')),
                ('updated_at', models.DateTimeField(help_text=b'Time when event was last updated')),
                ('attendees', models.ManyToManyField(help_text=b'People who are attending this event', related_name='attendees', through='calendar.Attendee', to='calendar.Account')),
                ('calendar', models.ManyToManyField(help_text=b'A event can be linked to many Calendars', to='calendar.Calendar')),
                ('organiser', models.ForeignKey(help_text=b"Organiser's field, set to creator if creator is User", on_delete=django.db.models.deletion.CASCADE, to='calendar.Account')),
            ],
        ),
        migrations.AddField(
            model_name='attendee',
            name='event',
            field=models.ForeignKey(help_text=b'Event for which User is doing RSVP', on_delete=django.db.models.deletion.CASCADE, to='calendar.Event'),
        ),
        migrations.AlterUniqueTogether(
            name='attendee',
            unique_together=set([('account', 'event')]),
        ),
    ]
